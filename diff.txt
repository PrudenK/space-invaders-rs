diff --git a/src/aliens/alien_coords.rs b/src/aliens/alien_coords.rs
index 8d2dcc8..efbf81c 100644
--- a/src/aliens/alien_coords.rs
+++ b/src/aliens/alien_coords.rs
@@ -1,11 +1,14 @@
-#[derive(PartialEq, Copy, Clone, Debug)]
+use crate::board::cell::AlienType;
+
+#[derive(PartialEq, Copy, Clone)]
 pub struct AlienCoords {
     pub x: u16,
-    pub y: u16
+    pub y: u16,
+    pub alien_type: AlienType
 }
 
 impl AlienCoords{
-    pub fn new(x: u16, y: u16) -> Self{
-        AlienCoords{x, y}
+    pub fn new(x: u16, y: u16, alien_type: AlienType) -> Self{
+        AlienCoords{x, y, alien_type}
     }
 }
diff --git a/src/aliens/alien_movement.rs b/src/aliens/alien_movement.rs
index f6c8669..b359ac2 100644
--- a/src/aliens/alien_movement.rs
+++ b/src/aliens/alien_movement.rs
@@ -44,7 +44,7 @@ fn last_alien_index_to_move(game: &GameState) -> usize {
         for j in 1..WIDTH{
             let cell = game.board[i][j];
 
-            if cell == Cell::Alien{
+            if matches!(cell, Cell::Alien(_)) {
                 if game.enemy_dir == 1{
                     if j > result{
                         result = j;
@@ -67,20 +67,24 @@ fn alien_side_move(game: &mut GameState, down: bool){
     for i in 1..HEIGHT{
         for j in 1..WIDTH{
             let cell = game.board[i][j];
-            if cell == Cell::Alien{
-                let i_move = if down { (i + 1) as u16 } else { i as u16 };
-                let j_move = if down { j as u16 } else { (j as isize + game.enemy_dir as isize) as u16 };
-                aliens_vector.push(AlienCoords::new(i_move, j_move));
-                game.board[i][j] = Cell::Empty;
+            if matches!(cell, Cell::Alien(_)) {
+                if let Cell::Alien(alien_type) = cell {
+                    let i_move = if down { (i + 1) as u16 } else { i as u16 };
+                    let j_move = if down { j as u16 } else { (j as isize + game.enemy_dir as isize) as u16 };
+
+                    aliens_vector.push(AlienCoords {
+                        x: i_move,
+                        y: j_move,
+                        alien_type,
+                    });
+
+                    game.board[i][j] = Cell::Empty;
+                }
             }
         }
     }
 
-    for i in 1..HEIGHT{
-        for j in 1..WIDTH{
-            if aliens_vector.contains(&AlienCoords::new(i as u16, j as u16)){
-                game.board[i][j] = Cell::Alien;
-            }
-        }
+    for alien in aliens_vector {
+        game.board[alien.x as usize][alien.y as usize] = Cell::Alien(alien.alien_type);
     }
 }
diff --git a/src/aliens/alien_shoot.rs b/src/aliens/alien_shoot.rs
index 6b7cb64..f7409b3 100644
--- a/src/aliens/alien_shoot.rs
+++ b/src/aliens/alien_shoot.rs
@@ -2,14 +2,14 @@ use std::collections::HashMap;
 use std::time::{Duration, Instant};
 use rand::{Rng};
 use crate::aliens::alien_coords::AlienCoords;
-use crate::board::cell::Cell;
+use crate::board::cell::{AlienType, Cell};
 use crate::board::game_state::{GameState, HEIGHT, WIDTH};
 use crate::utils::board_utils::{get_cell_coords, is_cell_active, ERROR_NUMBER};
 
 const ALIEN_BULLET_COOLDOWN: u64 = 600;
 
 pub fn make_alien_shoot(game: &mut GameState) {
-    if !is_cell_active(game, Cell::AlienBullet) && game.last_alien_bullet_shooted.elapsed() >= Duration::from_millis(ALIEN_BULLET_COOLDOWN) {
+    if !is_cell_active(game, |c| *c == Cell::AlienBullet) && game.last_alien_bullet_shooted.elapsed() >= Duration::from_millis(ALIEN_BULLET_COOLDOWN) {
         game.last_alien_bullet_shooted = Instant::now();
 
         if let Some(shooter) = calculate_alien_will_shot(game){
@@ -19,7 +19,7 @@ pub fn make_alien_shoot(game: &mut GameState) {
 }
 
 pub fn manage_alien_bullet_on_loop(game: &mut GameState){
-    if is_cell_active(game, Cell::AlienBullet) {
+    if is_cell_active(game, |c| *c == Cell::AlienBullet) {
         if game.last_alien_bullet_move.elapsed() >= Duration::from_millis(80){
             let (i_index, j_index) = get_cell_coords(game, Cell::AlienBullet);
 
@@ -46,8 +46,6 @@ fn calculate_alien_will_shot(game: &GameState) -> Option<AlienCoords> {
     let bottom_aliens:Vec<AlienCoords> = get_bottom_aliens_coords(game);
     let bottom_aliens_len = bottom_aliens.len();
 
-    println!("{:?}", bottom_aliens);
-
     let index_shoot = rng.gen_range(0..bottom_aliens_len + 1);
 
     bottom_aliens.get(index_shoot).copied()
@@ -61,8 +59,8 @@ pub fn get_bottom_aliens_coords(game: &GameState) -> Vec<AlienCoords> {
     for i in 1..HEIGHT{
         for j in 1..WIDTH{
             let cell = game.board[i][j];
-            if cell == Cell::Alien{
-                let coord = AlienCoords::new(i as u16, j as u16);
+            if matches!(cell, Cell::Alien(_)) {
+                let coord = AlienCoords::new(i as u16, j as u16, AlienType::Row1);
 
                 bottom_by_col
                     .entry(j as u16)
diff --git a/src/board/cell.rs b/src/board/cell.rs
index 817be1e..50691f7 100644
--- a/src/board/cell.rs
+++ b/src/board/cell.rs
@@ -1,13 +1,24 @@
+
+
 #[derive(Clone, Copy, PartialEq, Eq)]
 pub enum Cell {
     Empty,
     Player,
-    Alien,
+    Alien(AlienType),
     Bullet,
     Border,
     AlienBullet
 }
 
-pub enum AlienType{
-    
+#[derive(Clone, Copy, PartialEq, Eq)]
+pub enum AlienType {
+    Row1,
+    Row2,
+    Row3,
+    Row4,
+    Row5,
+    Row6,
+    Row7,
+    Row8,
+    Row9,
 }
\ No newline at end of file
diff --git a/src/board/game_state.rs b/src/board/game_state.rs
index 6dc6c80..292b189 100644
--- a/src/board/game_state.rs
+++ b/src/board/game_state.rs
@@ -1,5 +1,5 @@
 use std::time::Instant;
-use crate::board::cell::Cell;
+use crate::board::cell::{AlienType, Cell};
 use crate::game_result::result_condition::GameStatus;
 
 pub const WIDTH: usize = 13;
@@ -34,8 +34,21 @@ impl GameState {
         for i in 0..HEIGHT {
             for j in 0..WIDTH {
                 if i > 0 && i < 10{
+                    let alien_type = match i {
+                        1 => AlienType::Row1,
+                        2 => AlienType::Row2,
+                        3 => AlienType::Row3,
+                        4 => AlienType::Row4,
+                        5 => AlienType::Row5,
+                        6 => AlienType::Row6,
+                        7 => AlienType::Row7,
+                        8 => AlienType::Row8,
+                        9 => AlienType::Row9,
+                        _ => AlienType::Row1,
+                    };
+
                     if j % 2 == 0 && j < 10 && j > 0{
-                        self.board[i][j] = Cell::Alien;
+                        self.board[i][j] = Cell::Alien(alien_type);
                     }else{
                         self.board[i][j] = Cell::Empty;
                     }
@@ -67,15 +80,24 @@ impl GameState {
         for i in 0..HEIGHT {
             for j in 0..WIDTH {
                 match self.board[i][j] {
-                    Cell::Empty  => print!("   "),
-                    Cell::Alien  => print!("\x1b[37m~X~\x1b[0m"),
+                    Cell::Empty => print!("   "),
                     Cell::Player => print!("\x1b[37m<A>\x1b[0m"),
                     Cell::Bullet => print!("\x1b[37m | \x1b[0m"),
                     Cell::AlienBullet => print!("\x1b[31m | \x1b[0m"),
                     Cell::Border => print!("\x1b[100m   \x1b[0m"),
+
+                    Cell::Alien(AlienType::Row1) => print!("\x1b[32m~X~\x1b[0m"),
+                    Cell::Alien(AlienType::Row2) => print!("\x1b[33m-$-\x1b[0m"),
+                    Cell::Alien(AlienType::Row3) => print!("\x1b[34mx0x\x1b[0m"),
+                    Cell::Alien(AlienType::Row4) => print!("\x1b[35mzZz\x1b[0m"),
+                    Cell::Alien(AlienType::Row5) => print!("\x1b[36m~^~\x1b[0m"),
+                    Cell::Alien(AlienType::Row6) => print!("\x1b[92m-@-\x1b[0m"),
+                    Cell::Alien(AlienType::Row7) => print!("\x1b[93m X \x1b[0m"),
+                    Cell::Alien(AlienType::Row8) => print!("\x1b[94m X \x1b[0m"),
+                    Cell::Alien(AlienType::Row9) => print!("\x1b[95m X \x1b[0m"),
                 }
             }
-            print!("\r\n");
+            println!();
         }
     }
 }
\ No newline at end of file
diff --git a/src/game_result/result_condition.rs b/src/game_result/result_condition.rs
index d7c3c27..990830c 100644
--- a/src/game_result/result_condition.rs
+++ b/src/game_result/result_condition.rs
@@ -12,11 +12,11 @@ pub enum GameStatus{
 }
 
 pub fn calculate_game_status(game: &GameState) -> GameStatus {
-    if !is_cell_active(game, Cell::Alien) {
+    if !is_cell_active(game, |c| matches!(c, Cell::Alien(_))) {
         return GameStatus::Win;
     }
 
-    if !is_cell_active(game, Cell::Player) || has_alien_reached_player_row(game){
+    if !is_cell_active(game, |c| *c == Cell::Player) || has_alien_reached_player_row(game){
         return GameStatus::Loss;
     }
 
diff --git a/src/player/bullet.rs b/src/player/bullet.rs
index 8f4785e..dc10f4e 100644
--- a/src/player/bullet.rs
+++ b/src/player/bullet.rs
@@ -7,7 +7,7 @@ const BULLET_COOLDOWN: u64 = 500;
 
 
 pub fn shot_bullet(game: &mut GameState) {
-    if !is_cell_active(game, Cell::Bullet) && game.last_bullet_shooted.elapsed() >= Duration::from_millis(BULLET_COOLDOWN) {
+    if !is_cell_active(game, |c| *c == Cell::Bullet) && game.last_bullet_shooted.elapsed() >= Duration::from_millis(BULLET_COOLDOWN) {
         game.last_bullet_shooted = Instant::now();
 
         if let Some(j_player_index) = game.board[HEIGHT -2].iter().position(|&c| c == Cell::Player) {
@@ -17,7 +17,7 @@ pub fn shot_bullet(game: &mut GameState) {
 }
 
 pub fn manage_bullet_on_loop(game: &mut GameState) {
-    if is_cell_active(game, Cell::Bullet) {
+    if is_cell_active(game, |c| *c == Cell::Bullet) {
         if game.last_bullet_move.elapsed() >= Duration::from_millis(30) {
             let (i_index, j_index) = get_cell_coords(game, Cell::Bullet);
 
@@ -29,7 +29,7 @@ pub fn manage_bullet_on_loop(game: &mut GameState) {
 
                 match game.board[i_index -1][j_index] {
                     Cell::Border => {},
-                    Cell::Alien | Cell::AlienBullet => {
+                    Cell::Alien(_) | Cell::AlienBullet => {
                         game.board[i_index - 1][j_index] = Cell::Empty
                     },
                     _ => game.board[i_index - 1][j_index] = Cell::Bullet
diff --git a/src/utils/board_utils.rs b/src/utils/board_utils.rs
index df8f37b..3993196 100644
--- a/src/utils/board_utils.rs
+++ b/src/utils/board_utils.rs
@@ -3,10 +3,10 @@ use crate::board::game_state::{GameState, HEIGHT, WIDTH};
 
 pub const ERROR_NUMBER: usize = 999;
 
-pub fn is_cell_active(game: &GameState, cell_type: Cell) -> bool {
+pub fn is_cell_active<F>(game: &GameState, pred: F) -> bool where F: Fn(&Cell) -> bool,{
     for i in 0..HEIGHT {
         for j in 0..WIDTH {
-            if game.board[i][j] == cell_type {
+            if pred(&game.board[i][j]) {
                 return true;
             }
         }
